<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/208814b38b.js" crossorigin="anonymous"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="estilos.css">
    <title>Dashboard</title>
</head>
<body>
    <nav>
        <a>SmartTicket</a>
    </nav>
    <div class="container">
        <table>
            <tr>
                <th>Caja</th>
                <th>Turno</th>
            </tr>
        </table>
        <section>
            <div>
                <i class="fa-solid fa-hourglass-start fa-bounce fa-10x" style="color: white;"></i>
            </div>
            <div>
                <p>Tiempo de espera aproximado.</p>
            </div>
            <div>
                <p>1 Hora</p>
            </div>
        </section>
    </div>
    
</body>
</html>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js" is:inline></script>
<script is:inline>
    class DTOTABLE{
        constructor(IdCajero, NombreCaja, NumeroTurno){
            this.IdCajero = IdCajero;
            this.NombreCaja = NombreCaja;
            this.NumeroTurno = NumeroTurno;
        }
    }

    let Tabla = document.querySelector("table");

    const connection = new signalR.HubConnectionBuilder()
    .withUrl("https://atb.websitos256.com/tickets",{
        skipNegotiaton:true,
        transport: signalR.HttpTransportType.WebSockets
    })
    .withAutomaticReconnect()
    .configureLogging(signalR.LogLevel.Information)
    .build();

    connection.on("ActualizarTabla", (message) => {
        console.log(message);
        
        
    });
    async function IniciarConexion(){
                try {
                    await connection.start();
                    if(connection.state == "Connected"){
                        try{
                            
                        }
                        catch(error){
                            console.log(error);
                        }
                    }
                } catch (error) {
                    console.log(error);
                }
            }
            IniciarConexion();

            async function GenerarTicket(){
                try{
                    await connection.invoke("GenerarTicket");
                }
                catch(error){
                    console.log(error);
                }
            }
</script>
<style>
    html, body {
    width: 100%;
    height:100%;
    padding: 0;
    margin: 0;
    font-family: "Roboto", sans-serif;
    font-weight: 700;
}

nav {
    background: #072146;
    color: white;
    font-size: 2.5rem;
    padding: 10px 0 10px 10px;
}


.container{
    display: flex;
    height: 95%;
}

table {
    width: 50%;
    height: 100%;
    border-spacing: 0px 30px;
    margin: 0;
}
 th, td {
    text-align: center;
    font-size: 3.5rem;
}
 th {
    background-color: white;
    color: #002e5d;
    height: 5%;
    font-weight: bold;
}
 td {
    padding: 30px;
    background-color: #006bb3;
    color: white;
}

section {
    width: 50%;
    display: flex;
    flex-direction: column;
    background-color:#043263;
    align-items: center;
    justify-content: center;
}

p {
    color: white;
    font-size: 3rem;
    margin: 10px;
}
</style>