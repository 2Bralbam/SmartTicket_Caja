---
import Layout from "../layouts/Layout.astro"
---
<link rel="stylesheet" type="text/css" href="homestyles.css">
<Layout title="Home">
    <main>
        <div class="infoContainer">
            <h2 class="welcomeTitle">Bienvenido <h2 class="nombre" id="nombre">Nombre</h2></h2>   
            <h3>Te encuentras en la caja 3</h3>
        </div>
        <section class="boxContainer">
            <div class="InteractiveBox">
                <div class="boxHeader">
                    <h1 class="boxTitle">
                        Turno actual:
                    </h1>
                    
                </div>
                <button class="content">
                    <p class="ticketTurno">
                        A001
                    </p>
                    <p>
                        Turnos pendientes: <p class="turnosPendientes">20</p>
                    </p>
                </button>  
            </div>
            <div class="bottomInteractiveBox">
                <div class="secondInteractiveBox">
                    <div class="boxHeader">
                        <h1 class="boxTitle">
                            Cancelar
                        </h1>
                        
                    </div>
                    <button class="content">
                        <svg xmlns="http://www.w3.org/2000/svg" onclick="CancelarTicket()" width="148" height="148" viewBox="0 0 24 24"><path fill="#043263" d="m12 13.4l2.9 2.9q.275.275.7.275t.7-.275t.275-.7t-.275-.7L13.4 12l2.9-2.9q.275-.275.275-.7t-.275-.7t-.7-.275t-.7.275L12 10.6L9.1 7.7q-.275-.275-.7-.275t-.7.275t-.275.7t.275.7l2.9 2.9l-2.9 2.9q-.275.275-.275.7t.275.7t.7.275t.7-.275zm0 8.6q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22m0-2q3.35 0 5.675-2.325T20 12t-2.325-5.675T12 4T6.325 6.325T4 12t2.325 5.675T12 20m0-8"/></svg>
                    </button>  
                </div><div class="thirdInteractiveBox">
                    <div class="boxHeader">
                        <h1 class="boxTitle">
                            Siguiente
                        </h1>
                        
                    </div>
                    <button class="content">
                        <svg xmlns="http://www.w3.org/2000/svg" id="siguienteBtn" width="148" height="148" viewBox="0 0 24 24"><path fill="#043263" d="m12.2 13l-.9.9q-.275.275-.275.7t.275.7t.7.275t.7-.275l2.6-2.6q.3-.3.3-.7t-.3-.7l-2.6-2.6q-.275-.275-.7-.275t-.7.275t-.275.7t.275.7l.9.9H9q-.425 0-.712.288T8 12t.288.713T9 13zm-.2 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22m0-2q3.35 0 5.675-2.325T20 12t-2.325-5.675T12 4T6.325 6.325T4 12t2.325 5.675T12 20m0-8"/></svg>
                    </button>  
                    <button onclick="GenerarTicket()">Generar Ticket</button>
                </div>
            </div>
        </section>
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js" is:inline></script>
        <script is:inline>
            try{
                let JWTToken = sessionStorage.getItem('token');
                const TituloNombre = document.querySelector('#nombre');
                if(JWTToken == null || JWTToken == undefined){
                    window.location.href = "/index.html";
                }
                else{
                    let decodedToken = parseJwt(JWTToken);
                    let Rol = decodedToken.role;
                    if(Rol != "Cajero" && Rol != "Admin" || Rol == null || Rol == undefined){
                        window.location.href = "/index.html";
                    }
                    let IdUsuario = decodedToken.Id;
                    if(IdUsuario != null || IdUsuario != undefined){
                        localStorage.setItem('IdUsuario', IdUsuario);
                    }
                    let Nombre = decodedToken.unique_name;
                    TituloNombre.textContent = Nombre;
                    console.log(parseJwt(JWTToken));
                    
                }
                function parseJwt(token) {
                    const base64Url = token.split('.')[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                    return JSON.parse(jsonPayload);
                }
            }
            catch(error){
                console.log(error);
                localStorage.clear();
                window.location.href = "/index.html";
            }
            
        </script>
        <script is:inline>
            const TicketsArray = [];
            let TicketActual;
            const TicketTurnoText = document.querySelector('.ticketTurno');
            TicketTurnoText.textContent = "Vacío";
            const TurnosPendientesText = document.querySelector('.turnosPendientes');
            TurnosPendientesText.textContent = TicketsArray.length;
            const SiguienteBtn = document.querySelector('#siguienteBtn');
            
            SiguienteBtn.addEventListener('click', async function(){
                SiguienteTicket();
            });

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://atb.websitos256.com/tickets",{
                    skipNegotiaton:true,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();


            connection.on("GenerarTicket", (ticket) => {
                console.log(`Nuevo ticket en espera: ${ticket}`);
                if(TicketsArray.includes(ticket)){
                    console.log(`Ticket ya existe`);
                    return;
                }
                TicketsArray.push(ticket);
                TurnosPendientesText.textContent = TicketsArray.length;
            });

            connection.on("AtenderCliente", (ticket) => {
                console.log(ticket);
                if(TicketActual != ticket){
                    TicketActual = ticket;
                }
            });

            async function IniciarConexion(){
                try {
                    await connection.start();
                    if(connection.state == "Connected"){
                        try{
                            await connection.invoke("AgregarCajero");
                        }
                        catch(error){
                            console.log(error);
                        }
                    }
                } catch (error) {
                    console.log(error);
                }
            }
            async function SiguienteTicket(){
                if(TicketsArray.length > 0){
                    if(connection.state != "Connected"){
                        console.log(`No hay conexión`);
                        return;
                    }
                    console.log(`Atendiendo ticket`);
                    let TicketActual = TicketsArray.shift();
                    TurnosPendientesText.textContent = TicketsArray.length;
                    TicketTurnoText.textContent = TicketActual;
                    try{
                        let IdCajero = localStorage.getItem('IdUsuario');
                        console.log(IdCajero);
                        IdCajero = parseInt(IdCajero);
                        await connection.invoke("AtenderCliente", IdCajero);
                    }
                    catch(error){
                        console.log(error);
                    }
                }
                else{
                    TicketTurnoText.textContent = "Vacío";
                    TurnosPendientesText.textContent = TicketsArray.length;
                }
            }
            async function CancelarTicket(){
                if(connection.state != "Connected"){
                    console.log(`No hay conexión`);
                    return;
                }
                if(TicketActual == null || TicketActual == undefined){
                    console.log(`No hay ticket actual`);
                    return;
                }
                else{
                    try{
                        let IdCajero = localStorage.getItem('IdUsuario');
                        IdCajero = parseInt(IdCajero);
                        let IdTurno = TicketActual.id;
                        await connection.invoke("ClienteCancelar",IdTurno, IdCajero);
                    }
                    catch(error){
                        console.log(error);
                    }
                }
            }
            connection.onclose(async () => {
                await IniciarConexion();
            });
            IniciarConexion();
            async function GenerarTicket(){
                try{
                    await connection.invoke("GenerarTicket");
                }
                catch(error){
                    console.log(error);
                }
            }
        </script>
</main>
</Layout>
